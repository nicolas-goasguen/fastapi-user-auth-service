name: ${PROJECT_NAME}-${ENVIRONMENT}

services:

  db:
    build: ./db
    command: >
      postgres
      -c shared_preload_libraries=pg_cron
      -c cron.database_name=${POSTGRES_DB}
    restart: always
    environment:
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - custom-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  mail:
    image: maildev/maildev
    restart: always
    environment:
      - MAILDEV_INCOMING_USER=${SMTP_USER}
      - MAILDEV_INCOMING_PASS=${SMTP_PASS}
    ports:
      - "${EXPOSED_SMTP_WEB_PORT:-}:1080"
    networks:
      - custom-network

  rabbitmq:
    image: rabbitmq:latest
    restart: always
    environment:
      RABBITMQ_NODE_PORT: ${RABBITMQ_NODE_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq
      - rabbitmq-log:/var/log/rabbitmq
    networks:
      - custom-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  celery_worker:
    build: ./api
    command: celery -A src.workers.celery worker --loglevel=info
    working_dir: /
    restart: always
    env_file:
      - .env.${ENVIRONMENT}
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      rabbitmq:
        condition: service_healthy
      mail:
        condition: service_started
    networks:
      - custom-network

  api:
    build: ./api
    restart: always
    env_file:
      - .env.${ENVIRONMENT}
    ports:
      - "${EXPOSED_API_PORT:-}:80"
    depends_on:
      db:
        condition: service_healthy
      mail:
        condition: service_started
      rabbitmq:
        condition: service_started
      celery_worker:
        condition: service_started
    networks:
      - custom-network

networks:
  custom-network:
    driver: bridge

volumes:
  pgdata:
  rabbitmq-lib:
  rabbitmq-log:
